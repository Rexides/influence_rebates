namespace = influence_rebates

ship_event = {
	id = influence_rebates.1
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		SOLAR_SYSTEM = {
			# Calculate number of owned and total neighboring systems
			every_neighbor_system = {
				ignore_hyperlanes = no
				if = {
					limit = {
						exists = owner
						prevprev.owner = { is_same_value = owner }
					}
					prev = {
						change_variable = {
							which = _num_systems
							value = 1
						}
					}
					prev = {
						change_variable = {
							which = _num_owned_systems
							value = 1
						}
					}
				}
				else = {
					prev = {
						change_variable = {
							which = _num_systems
							value = 1
						}
					}
				}
			}
			# Sanity check for isolated systems
			if = {
				limit = {
					check_variable = {
						which = _num_systems
						value = 0
					}
				}
				set_variable = {
					which = _num_systems
					value = 1
				}
			}
			# Set maximum amount of rebate, assuming unmodofied 100 influence cost
			set_variable = {
				which = _influence_rebate
				value = 75
			}
			# Calculate the appropriate reduction based on vanilla values for influence costs reductions
			set_variable = {
				which = _rebate_multiplier
				value = 1.0
			}
			if = {
				limit = {
					prev.owner = { has_ethic = "ethic_xenophobe" }
				}
				change_variable = {
					which = _rebate_multiplier
					value = -0.2
				}
			}
			if = {
				limit = {
					prev.owner = { has_ethic = "ethic_fanatic_xenophobe" }
				}
				change_variable = {
					which = _rebate_multiplier
					value = -0.4
				}
			}
			if = {
				limit = {
					prev.owner = { has_ascension_perk = ap_interstellar_dominion }
				}
				change_variable = {
					which = _rebate_multiplier
					value = -0.2
				}
			}
			if = {
				limit = {
					prev.owner = { has_tradition = tr_expansion_reach_for_the_stars }
				}
				change_variable = {
					which = _rebate_multiplier
					value = -0.1
				}
			}
			if = {
				limit = {
					prev.owner = { has_civic = civic_machine_terminator }
				}
				change_variable = {
					which = _rebate_multiplier
					value = -0.3
				}
			}
			if = {
				limit = {
					prev.owner = { has_civic = civic_hive_devouring_swarm  }
				}
				change_variable = {
					which = _rebate_multiplier
					value = -0.5
				}
			}
			if = {
				limit = {
					prev.owner.ruler = { has_trait = trait_ruler_expansionist }
				}
				change_variable = {
					which = _rebate_multiplier
					value = -0.15
				}
			}
			# Sanity check, but I don't think there is ever a combination that can bring the total to zero or less
			if = {
				limit = {
					check_variable = {
						which = _rebate_multiplier
						value < 0
					}
				}
				set_variable = {
					which = _rebate_multiplier
					value = 0
				}
			}
			multiply_variable = {
				which = _influence_rebate
				value = _rebate_multiplier
			}
			# Rebate = Owned neighbor systems / total NS
			multiply_variable = {
				which = _influence_rebate
				value = _num_owned_systems
			}
			divide_variable = {
				which = _influence_rebate
				value = _num_systems
			}
			# For systems adjancent to the home system, make 50 the minimum rebate (before adjusting for multipliers)
			set_variable = {
				which = _initial_system_min_rebate
				value = 50
			}
			multiply_variable = {
				which = _initial_system_min_rebate
				value = _rebate_multiplier
			}
			if = {
				limit = {
					AND = {
						any_neighbor_system = {
							exists = owner
							prevprev.owner = { is_same_value = owner }
							has_star_flag = empire_home_system
						}
					}
					check_variable = {
						which = _influence_rebate
						value < _initial_system_min_rebate
					}
				}
				set_variable = {
					which = _influence_rebate
					value = _initial_system_min_rebate
				}
			}
			log = "Rebate for empire [prev.owner.GetName]:[This._influence_rebate] (Owned neighboring systems: [This._num_owned_systems], Total NS:[This._num_systems], Rebate multiplier:[This._rebate_multiplier])"
			# Weird way of giving a variable amount of resources to the player. Supports a maximum of 109, witch should cover the current numbers
			while = {
				count = 10
				limit = {
					check_variable = {
						which = _influence_rebate
						value >= 10
					}
				}
				subtract_variable = {
					which = _influence_rebate
					value = 10
				}
				prev.owner = {
					add_resource = {
						influence = 10
					}
				}
			}
			while = {
				count = 10
				limit = {
					check_variable = {
						which = _influence_rebate
						value > 0
					}
				}
				subtract_variable = {
					which = _influence_rebate
					value = 1
				}
				prev.owner = {
					add_resource = {
						influence = 1
					}
				}
			}
			set_variable = {
				which = _num_owned_systems
				value = 0
			}
			set_variable = {
				which = _num_systems
				value = 0
			}
		}
	}
}
